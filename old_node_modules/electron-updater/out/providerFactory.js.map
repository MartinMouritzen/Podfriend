{"version":3,"sources":["../src/providerFactory.ts"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGM,SAAU,sCAAV,CAAiD,GAAjD,EAA4D;AAChE,SAAO,CAAC,GAAG,CAAC,QAAJ,CAAa,kBAAb,CAAR;AACD;;AAEK,SAAU,YAAV,CAAuB,IAAvB,EAAuE,OAAvE,EAA4F,cAA5F,EAAkI;AACtI;AACA,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,oCAAS,yCAAT,EAAoD,4CAApD,CAAN;AACD;;AAED,QAAM,QAAQ,GAAG,IAAI,CAAC,QAAtB;;AACA,UAAQ,QAAR;AACE,SAAK,QAAL;AAAe;AACb,cAAM,aAAa,GAAG,IAAtB;AACA,cAAM,KAAK,GAAG,CAAC,aAAa,CAAC,OAAd,GAAwB,OAAO,CAAC,GAAR,CAAY,QAAZ,IAAwB,OAAO,CAAC,GAAR,CAAY,YAA5D,GAA2E,IAA5E,KAAqF,aAAa,CAAC,KAAjH;;AACA,YAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,iBAAO,KAAI,gCAAJ,EAAmB,aAAnB,EAAkC,OAAlC,EAA2C,cAA3C,CAAP;AACD,SAFD,MAGK;AACH,iBAAO,KAAI,8CAAJ,EAA0B,aAA1B,EAAyC,OAAzC,EAAkD,KAAlD,EAAyD,cAAzD,CAAP;AACD;AACF;;AAED,SAAK,IAAL;AACA,SAAK,QAAL;AACE,aAAO,KAAI,kCAAJ,EAAoB;AACzB,QAAA,QAAQ,EAAE,SADe;AAEzB,QAAA,GAAG,EAAE,oDAAyB,IAAzB,CAFoB;AAGzB,QAAA,OAAO,EAAG,IAAsB,CAAC,OAAvB,IAAkC;AAHnB,OAApB,EAIJ,OAJI,EAIK,EACV,GAAG,cADO;AAEV;AACA,QAAA,yBAAyB,EAAE;AAHjB,OAJL,CAAP;;AAUF,SAAK,SAAL;AAAgB;AACd,cAAM,OAAO,GAAG,IAAhB;AACA,eAAO,KAAI,kCAAJ,EAAoB,OAApB,EAA6B,OAA7B,EAAsC,EAC3C,GAAG,cADwC;AAE3C,UAAA,yBAAyB,EAAE,OAAO,CAAC,uBAAR,KAAoC,KAApC,IAA6C,sCAAsC,CAAC,OAAO,CAAC,GAAT;AAFnE,SAAtC,CAAP;AAID;;AAED,SAAK,SAAL;AACE,aAAO,KAAI,kCAAJ,EAAoB,IAApB,EAA4C,cAA5C,CAAP;;AAEF;AACE,YAAM,oCAAS,yBAAyB,QAAQ,EAA1C,EAA8C,kCAA9C,CAAN;AApCJ;AAsCD,C","sourcesContent":["import { AllPublishOptions, BaseS3Options, BintrayOptions, GenericServerOptions, getS3LikeProviderBaseUrl, GithubOptions, newError, PublishConfiguration } from \"builder-util-runtime\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { BintrayProvider } from \"./providers/BintrayProvider\"\nimport { GenericProvider } from \"./providers/GenericProvider\"\nimport { GitHubProvider } from \"./providers/GitHubProvider\"\nimport { PrivateGitHubProvider } from \"./providers/PrivateGitHubProvider\"\nimport { Provider, ProviderRuntimeOptions } from \"./providers/Provider\"\n\nexport function isUrlProbablySupportMultiRangeRequests(url: string): boolean {\n  return !url.includes(\"s3.amazonaws.com\")\n}\n\nexport function createClient(data: PublishConfiguration | AllPublishOptions, updater: AppUpdater, runtimeOptions: ProviderRuntimeOptions): Provider<any> {\n  // noinspection SuspiciousTypeOfGuard\n  if (typeof data === \"string\") {\n    throw newError(\"Please pass PublishConfiguration object\", \"ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION\")\n  }\n\n  const provider = data.provider\n  switch (provider) {\n    case \"github\": {\n      const githubOptions = data as GithubOptions\n      const token = (githubOptions.private ? process.env.GH_TOKEN || process.env.GITHUB_TOKEN : null) || githubOptions.token\n      if (token == null) {\n        return new GitHubProvider(githubOptions, updater, runtimeOptions)\n      }\n      else {\n        return new PrivateGitHubProvider(githubOptions, updater, token, runtimeOptions)\n      }\n    }\n\n    case \"s3\":\n    case \"spaces\":\n      return new GenericProvider({\n        provider: \"generic\",\n        url: getS3LikeProviderBaseUrl(data),\n        channel: (data as BaseS3Options).channel || null\n      }, updater, {\n        ...runtimeOptions,\n        // https://github.com/minio/minio/issues/5285#issuecomment-350428955\n        isUseMultipleRangeRequest: false,\n      })\n\n    case \"generic\": {\n      const options = data as GenericServerOptions\n      return new GenericProvider(options, updater, {\n        ...runtimeOptions,\n        isUseMultipleRangeRequest: options.useMultipleRangeRequest !== false && isUrlProbablySupportMultiRangeRequests(options.url),\n      })\n    }\n\n    case \"bintray\":\n      return new BintrayProvider(data as BintrayOptions, runtimeOptions)\n\n    default:\n      throw newError(`Unsupported provider: ${provider}`, \"ERR_UPDATER_UNSUPPORTED_PROVIDER\")\n  }\n}"],"sourceRoot":""}
