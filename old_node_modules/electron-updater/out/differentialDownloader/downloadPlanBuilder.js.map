{"version":3,"sources":["../../src/differentialDownloader/downloadPlanBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { BlockMap, BlockMapFile } from \"builder-util-runtime/out/blockMapApi\"\nimport { Logger } from \"../main\"\n\nexport enum OperationKind {\n  COPY, DOWNLOAD\n}\n\nexport interface Operation {\n  kind: OperationKind\n\n  // inclusive\n  start: number\n  // exclusive\n  end: number\n\n  // debug only\n  // oldBlocks: Array<string> | null\n}\n\nexport function computeOperations(oldBlockMap: BlockMap, newBlockMap: BlockMap, logger: Logger): Array<Operation> {\n  const nameToOldBlocks = buildBlockFileMap(oldBlockMap.files)\n  const nameToNewBlocks = buildBlockFileMap(newBlockMap.files)\n\n  let lastOperation: Operation | null = null\n\n  // for now only one file is supported in block map\n  const blockMapFile = newBlockMap.files[0]\n  const operations: Array<Operation> = []\n  const name = blockMapFile.name\n  const oldEntry = nameToOldBlocks.get(name)\n  if (oldEntry == null) {\n    // new file (unrealistic case for now, because in any case both blockmap contain the only file named as \"file\")\n    throw new Error(`no file ${name} in old blockmap`)\n  }\n\n  const newFile = nameToNewBlocks.get(name)!!\n  let changedBlockCount = 0\n\n  const {checksumToOffset: checksumToOldOffset, checksumToOldSize} = buildChecksumMap(nameToOldBlocks.get(name)!!, oldEntry.offset, logger)\n\n  let newOffset = blockMapFile.offset\n  for (let i = 0; i < newFile.checksums.length; newOffset += newFile.sizes[i], i++) {\n    const blockSize = newFile.sizes[i]\n    const checksum = newFile.checksums[i]\n    let oldOffset = checksumToOldOffset.get(checksum)\n    if (oldOffset != null && checksumToOldSize.get(checksum) !== blockSize) {\n      logger.warn(`Checksum (\"${checksum}\") matches, but size differs (old: ${checksumToOldSize.get(checksum)}, new: ${blockSize})`)\n      oldOffset = undefined\n    }\n\n    if (oldOffset === undefined) {\n      // download data from new file\n      changedBlockCount++\n\n      if (lastOperation != null && lastOperation.kind === OperationKind.DOWNLOAD && lastOperation.end === newOffset) {\n        lastOperation.end += blockSize\n      }\n      else {\n        lastOperation = {\n          kind: OperationKind.DOWNLOAD,\n          start: newOffset,\n          end: newOffset + blockSize,\n          // oldBlocks: null,\n        }\n        validateAndAdd(lastOperation, operations, checksum, i)\n      }\n    }\n    else {\n      // reuse data from old file\n      if (lastOperation != null && lastOperation.kind === OperationKind.COPY && lastOperation.end === oldOffset) {\n        lastOperation.end += blockSize\n        // lastOperation.oldBlocks!!.push(checksum)\n      }\n      else {\n        lastOperation = {\n          kind: OperationKind.COPY,\n          start: oldOffset,\n          end: oldOffset + blockSize,\n          // oldBlocks: [checksum]\n        }\n        validateAndAdd(lastOperation, operations, checksum, i)\n      }\n    }\n  }\n\n  if (changedBlockCount > 0) {\n    logger.info(`File${blockMapFile.name === \"file\" ? \"\" : (\" \" + blockMapFile.name)} has ${changedBlockCount} changed blocks`)\n  }\n  return operations\n}\n\nconst isValidateOperationRange = process.env.DIFFERENTIAL_DOWNLOAD_PLAN_BUILDER_VALIDATE_RANGES === \"true\"\n\nfunction validateAndAdd(operation: Operation, operations: Array<Operation>, checksum: string, index: number): void {\n  if (isValidateOperationRange && operations.length !== 0) {\n    const lastOperation = operations[operations.length - 1]\n    if (lastOperation.kind === operation.kind && operation.start < lastOperation.end && operation.start > lastOperation.start) {\n      const min = [lastOperation.start, lastOperation.end, operation.start, operation.end].reduce((p, v) => p < v ? p : v)\n      throw new Error(`operation (block index: ${index}, checksum: ${checksum}, kind: ${OperationKind[operation.kind]}) overlaps previous operation (checksum: ${checksum}):\\n` +\n      `abs: ${lastOperation.start} until ${lastOperation.end} and ${operation.start} until ${operation.end}\\n` +\n      `rel: ${lastOperation.start - min} until ${lastOperation.end - min} and ${operation.start - min} until ${operation.end - min}`\n      )\n    }\n  }\n  operations.push(operation)\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction buildChecksumMap(file: BlockMapFile, fileOffset: number, logger: Logger) {\n  const checksumToOffset = new Map<string, number>()\n  const checksumToSize = new Map<string, number>()\n  let offset = fileOffset\n  const debugLog = logger.debug\n  for (let i = 0; i < file.checksums.length; i++) {\n    const checksum = file.checksums[i]\n    const size = file.sizes[i]\n\n    const existing = checksumToSize.get(checksum)\n    if (existing === undefined) {\n      checksumToOffset.set(checksum, offset)\n      checksumToSize.set(checksum, size)\n    }\n    else if (debugLog != null) {\n      const sizeExplanation = existing === size ? \"(same size)\" : `(size: ${existing}, this size: ${size})`\n      debugLog(`${checksum} duplicated in blockmap ${sizeExplanation}, it doesn't lead to broken differential downloader, just corresponding block will be skipped)`)\n    }\n    offset += size\n  }\n  return {checksumToOffset, checksumToOldSize: checksumToSize}\n}\n\nfunction buildBlockFileMap(list: Array<BlockMapFile>): Map<string, BlockMapFile> {\n  const result = new Map<string, BlockMapFile>()\n  for (const item of list) {\n    result.set(item.name, item)\n  }\n  return result\n}\n"],"sourceRoot":""}
