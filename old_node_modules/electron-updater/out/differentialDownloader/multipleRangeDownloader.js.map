{"version":3,"sources":["../../src/differentialDownloader/multipleRangeDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHttpError, safeGetHeader } from \"builder-util-runtime\"\nimport { IncomingMessage } from \"http\"\nimport { Writable } from \"stream\"\nimport { copyData, DataSplitter, PartListDataTask } from \"./DataSplitter\"\nimport { DifferentialDownloader } from \"./DifferentialDownloader\"\nimport { Operation, OperationKind } from \"./downloadPlanBuilder\"\n\nexport function executeTasksUsingMultipleRangeRequests(differentialDownloader: DifferentialDownloader, tasks: Array<Operation>, out: Writable, oldFileFd: number, reject: (error: Error) => void): (taskOffset: number) => void {\n  const w = (taskOffset: number): void => {\n    if (taskOffset >= tasks.length) {\n      if (differentialDownloader.fileMetadataBuffer != null) {\n        out.write(differentialDownloader.fileMetadataBuffer)\n      }\n      out.end()\n      return\n    }\n\n    const nextOffset = taskOffset + 1000\n    doExecuteTasks(differentialDownloader, {\n      tasks,\n      start: taskOffset,\n      end: Math.min(tasks.length, nextOffset),\n      oldFileFd,\n    }, out, () => w(nextOffset), reject)\n  }\n  return w\n}\n\nfunction doExecuteTasks(differentialDownloader: DifferentialDownloader, options: PartListDataTask, out: Writable, resolve: () => void, reject: (error: Error) => void): void {\n  let ranges = \"bytes=\"\n  let partCount = 0\n  const partIndexToTaskIndex = new Map<number, number>()\n  const partIndexToLength: Array<number> = []\n  for (let i = options.start; i < options.end; i++) {\n    const task = options.tasks[i]\n    if (task.kind === OperationKind.DOWNLOAD) {\n      ranges += `${task.start}-${task.end - 1}, `\n      partIndexToTaskIndex.set(partCount, i)\n      partCount++\n      partIndexToLength.push(task.end - task.start)\n    }\n  }\n\n  if (partCount <= 1) {\n    // the only remote range - copy\n    const w = (index: number): void => {\n      if (index >= options.end) {\n        resolve()\n        return\n      }\n\n      const task = options.tasks[index++]\n\n      if (task.kind === OperationKind.COPY) {\n        copyData(task, out, options.oldFileFd, reject, () => w(index))\n      }\n      else {\n        const requestOptions = differentialDownloader.createRequestOptions()\n        requestOptions.headers!!.Range = `bytes=${task.start}-${task.end - 1}`\n        const request = differentialDownloader.httpExecutor.createRequest(requestOptions, response => {\n          if (!checkIsRangesSupported(response, reject)) {\n            return\n          }\n\n          response.pipe(out, {\n            end: false\n          })\n          response.once(\"end\", () => w(index))\n        })\n        differentialDownloader.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n        request.end()\n      }\n    }\n\n    w(options.start)\n    return\n  }\n\n  const requestOptions = differentialDownloader.createRequestOptions()\n  requestOptions.headers!!.Range = ranges.substring(0, ranges.length - 2)\n  const request = differentialDownloader.httpExecutor.createRequest(requestOptions, response => {\n    if (!checkIsRangesSupported(response, reject)) {\n      return\n    }\n\n    const contentType = safeGetHeader(response, \"content-type\")\n    const m = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i.exec(contentType)\n    if (m == null) {\n      reject(new Error(`Content-Type \"multipart/byteranges\" is expected, but got \"${contentType}\"`))\n      return\n    }\n\n    const dicer = new DataSplitter(out, options, partIndexToTaskIndex, m[1] || m[2], partIndexToLength, resolve)\n    dicer.on(\"error\", reject)\n    response.pipe(dicer)\n  })\n  differentialDownloader.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n  request.end()\n}\n\nexport function checkIsRangesSupported(response: IncomingMessage, reject: (error: Error) => void): boolean {\n  // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n  if (response.statusCode!! >= 400) {\n    reject(createHttpError(response))\n    return false\n  }\n\n  if (response.statusCode !== 206) {\n    const acceptRanges = safeGetHeader(response, \"accept-ranges\")\n    if (acceptRanges == null || acceptRanges === \"none\") {\n      reject(new Error(`Server doesn't support Accept-Ranges (response code ${response.statusCode})`))\n      return false\n    }\n  }\n  return true\n}"],"sourceRoot":""}
