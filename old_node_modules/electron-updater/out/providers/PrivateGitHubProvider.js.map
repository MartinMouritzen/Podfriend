{"version":3,"sources":["../../src/providers/PrivateGitHubProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, GithubOptions, HttpError, newError, UpdateInfo } from \"builder-util-runtime\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { AppUpdater } from \"../AppUpdater\"\nimport { URL } from \"url\"\nimport { BaseGitHubProvider } from \"./GitHubProvider\"\nimport { getChannelFilename, newUrlFromBase, ResolvedUpdateFileInfo } from \"../main\"\nimport { getFileList, ProviderRuntimeOptions } from \"./Provider\"\n\nexport interface PrivateGitHubUpdateInfo extends UpdateInfo {\n  assets: Array<Asset>\n}\n\nexport class PrivateGitHubProvider extends BaseGitHubProvider<PrivateGitHubUpdateInfo> {\n  constructor(options: GithubOptions, private readonly updater: AppUpdater, private readonly token: string, runtimeOptions: ProviderRuntimeOptions) {\n    super(options, \"api.github.com\", runtimeOptions)\n  }\n\n  protected createRequestOptions(url: URL, headers?: OutgoingHttpHeaders | null): RequestOptions {\n    const result = super.createRequestOptions(url, headers);\n    (result as any).redirect = \"manual\"\n    return result\n  }\n\n  async getLatestVersion(): Promise<PrivateGitHubUpdateInfo> {\n    const cancellationToken = new CancellationToken()\n    const channelFile = getChannelFilename(this.getDefaultChannelName())\n\n    const releaseInfo = await this.getLatestVersionInfo(cancellationToken)\n    const asset = releaseInfo.assets.find(it => it.name === channelFile)\n    if (asset == null) {\n      // html_url must be always, but just to be sure\n      throw newError(`Cannot find ${channelFile} in the release ${releaseInfo.html_url || releaseInfo.name}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n    }\n\n    const url = new URL(asset.url)\n    let result: any\n    try {\n      result = safeLoad((await this.httpRequest(url, this.configureHeaders(\"application/octet-stream\"), cancellationToken))!!)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.statusCode === 404) {\n        throw newError(`Cannot find ${channelFile} in the latest release artifacts (${url}): ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n      }\n      throw e\n    }\n\n    (result as PrivateGitHubUpdateInfo).assets = releaseInfo.assets\n    return result\n  }\n\n  get fileExtraDownloadHeaders(): OutgoingHttpHeaders | null {\n    return this.configureHeaders(\"application/octet-stream\")\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  private configureHeaders(accept: string) {\n    return {\n      accept,\n      authorization: `token ${this.token}`,\n    }\n  }\n\n  private async getLatestVersionInfo(cancellationToken: CancellationToken): Promise<ReleaseInfo> {\n    const allowPrerelease = this.updater.allowPrerelease\n    let basePath = this.basePath\n    if (!allowPrerelease) {\n      basePath = `${basePath}/latest`\n    }\n\n    const url = newUrlFromBase(basePath, this.baseUrl)\n    try {\n      const version = (JSON.parse((await this.httpRequest(url, this.configureHeaders(\"application/vnd.github.v3+json\"), cancellationToken))!!))\n      if (allowPrerelease) {\n        return version.find((v: any) => v.prerelease) || version[0]\n      }\n      else {\n        return version\n      }\n    }\n    catch (e) {\n      throw newError(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\n    }\n  }\n\n  private get basePath(): string {\n    return this.computeGithubBasePath(`/repos/${this.options.owner}/${this.options.repo}/releases`)\n  }\n\n  resolveFiles(updateInfo: PrivateGitHubUpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return getFileList(updateInfo).map(it => {\n      const name = path.posix.basename(it.url).replace(/ /g, \"-\")\n      const asset = updateInfo.assets.find(it => it != null && it.name === name)\n      if (asset == null) {\n        throw newError(`Cannot find asset \"${name}\" in: ${JSON.stringify(updateInfo.assets, null, 2)}`, \"ERR_UPDATER_ASSET_NOT_FOUND\")\n      }\n\n      return {\n        url: new URL(asset.url),\n        info: it,\n      }\n    })\n  }\n}\n\ninterface ReleaseInfo {\n  name: string\n  html_url: string\n  assets: Array<Asset>\n}\n\nexport interface Asset {\n  name: string\n  url: string\n}"],"sourceRoot":""}
