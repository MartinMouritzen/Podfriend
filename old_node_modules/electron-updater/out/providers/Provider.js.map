{"version":3,"sources":["../../src/providers/Provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, HttpExecutor, newError, safeStringifyJson, UpdateFileInfo, UpdateInfo, WindowsUpdateInfo, configureRequestUrl } from \"builder-util-runtime\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport { URL } from \"url\"\nimport { newUrlFromBase, ResolvedUpdateFileInfo } from \"../main\"\n\nexport type ProviderPlatform = \"darwin\" | \"linux\" | \"win32\"\n\nexport interface ProviderRuntimeOptions {\n  isUseMultipleRangeRequest: boolean\n  platform: ProviderPlatform\n\n  executor: HttpExecutor<any>\n}\n\nexport abstract class Provider<T extends UpdateInfo> {\n  private requestHeaders: OutgoingHttpHeaders | null = null\n  protected readonly executor: HttpExecutor<any>\n\n  protected constructor(private readonly runtimeOptions: ProviderRuntimeOptions) {\n    this.executor = runtimeOptions.executor\n  }\n\n  get isUseMultipleRangeRequest(): boolean {\n    return this.runtimeOptions.isUseMultipleRangeRequest !== false\n  }\n\n  private getChannelFilePrefix(): string {\n    if (this.runtimeOptions.platform === \"linux\") {\n      const arch = process.env.TEST_UPDATER_ARCH || process.arch\n      const archSuffix = arch === \"x64\" ? \"\" : `-${arch}`\n      return \"-linux\" + archSuffix\n    }\n    else {\n      return this.runtimeOptions.platform === \"darwin\" ? \"-mac\" : \"\"\n    }\n  }\n\n  // due to historical reasons for windows we use channel name without platform specifier\n  protected getDefaultChannelName(): string {\n    return this.getCustomChannelName(\"latest\")\n  }\n\n  protected getCustomChannelName(channel: string): string {\n    return `${channel}${this.getChannelFilePrefix()}`\n  }\n\n  get fileExtraDownloadHeaders(): OutgoingHttpHeaders | null {\n    return null\n  }\n\n  setRequestHeaders(value: OutgoingHttpHeaders | null): void {\n    this.requestHeaders = value\n  }\n\n  abstract getLatestVersion(): Promise<T>\n\n  abstract resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo>\n\n  /**\n   * Method to perform API request only to resolve update info, but not to download update.\n   */\n  protected httpRequest(url: URL, headers?: OutgoingHttpHeaders | null, cancellationToken?: CancellationToken): Promise<string | null> {\n    return this.executor.request(this.createRequestOptions(url, headers), cancellationToken)\n  }\n\n  protected createRequestOptions(url: URL, headers?: OutgoingHttpHeaders | null): RequestOptions {\n    const result: RequestOptions = {}\n    if (this.requestHeaders == null) {\n      if (headers != null) {\n        result.headers = headers\n      }\n    }\n    else {\n      result.headers = headers == null ? this.requestHeaders : {...this.requestHeaders, ...headers}\n    }\n\n    configureRequestUrl(url, result)\n    return result\n  }\n}\n\nexport function findFile(files: Array<ResolvedUpdateFileInfo>, extension: string, not?: Array<string>): ResolvedUpdateFileInfo | null | undefined  {\n  if (files.length === 0) {\n    throw newError(\"No files provided\", \"ERR_UPDATER_NO_FILES_PROVIDED\")\n  }\n\n  const result = files.find(it => it.url.pathname.toLowerCase().endsWith(`.${extension}`))\n  if (result != null) {\n    return result\n  }\n  else if (not == null) {\n    return files[0]\n  }\n  else {\n    return files.find(fileInfo => !not.some(ext => fileInfo.url.pathname.toLowerCase().endsWith(`.${ext}`)))\n  }\n}\n\nexport function parseUpdateInfo(rawData: string | null, channelFile: string, channelFileUrl: URL): UpdateInfo {\n  if (rawData == null) {\n    throw newError(`Cannot parse update info from ${channelFile} in the latest release artifacts (${channelFileUrl}): rawData: null`, \"ERR_UPDATER_INVALID_UPDATE_INFO\")\n  }\n\n  let result: UpdateInfo\n  try {\n    result = safeLoad(rawData) as UpdateInfo\n  }\n  catch (e) {\n    throw newError(`Cannot parse update info from ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}, rawData: ${rawData}`, \"ERR_UPDATER_INVALID_UPDATE_INFO\")\n  }\n  return result\n}\n\nexport function getFileList(updateInfo: UpdateInfo): Array<UpdateFileInfo> {\n  const files = updateInfo.files\n  if (files != null && files.length > 0) {\n    return files\n  }\n\n  // noinspection JSDeprecatedSymbols\n  if (updateInfo.path != null) {\n    // noinspection JSDeprecatedSymbols\n    return [\n      {\n        url: updateInfo.path,\n        sha2: (updateInfo as any).sha2,\n        sha512: updateInfo.sha512,\n      } as any,\n    ]\n  }\n  else {\n    throw newError(`No files provided: ${safeStringifyJson(updateInfo)}`, \"ERR_UPDATER_NO_FILES_PROVIDED\")\n  }\n}\n\nexport function resolveFiles(updateInfo: UpdateInfo, baseUrl: URL, pathTransformer: (p: string) => string = (p: string): string => p): Array<ResolvedUpdateFileInfo> {\n  const files = getFileList(updateInfo)\n  const result: Array<ResolvedUpdateFileInfo> = files.map(fileInfo => {\n    if ((fileInfo as any).sha2 == null && fileInfo.sha512 == null) {\n      throw newError(`Update info doesn't contain nor sha256 neither sha512 checksum: ${safeStringifyJson(fileInfo)}`, \"ERR_UPDATER_NO_CHECKSUM\")\n    }\n    return {\n      url: newUrlFromBase(pathTransformer(fileInfo.url), baseUrl),\n      info: fileInfo,\n    }\n  })\n\n  const packages = (updateInfo as WindowsUpdateInfo).packages\n  const packageInfo = packages == null ? null : (packages[process.arch] || packages.ia32)\n  if (packageInfo != null) {\n    (result[0] as any).packageInfo = {\n      ...packageInfo,\n      path: newUrlFromBase(pathTransformer(packageInfo.path), baseUrl).href,\n    }\n  }\n  return result\n}"],"sourceRoot":""}
