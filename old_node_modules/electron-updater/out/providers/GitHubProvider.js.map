{"version":3,"sources":["../../src/providers/GitHubProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, GithubOptions, githubUrl, HttpError, newError, parseXml, ReleaseNoteInfo, UpdateInfo, XElement } from \"builder-util-runtime\"\nimport * as semver from \"semver\"\nimport { URL } from \"url\"\nimport { AppUpdater } from \"../AppUpdater\"\nimport { getChannelFilename, newBaseUrl, newUrlFromBase, Provider, ResolvedUpdateFileInfo } from \"../main\"\nimport { parseUpdateInfo, ProviderRuntimeOptions, resolveFiles } from \"./Provider\"\n\nconst hrefRegExp = /\\/tag\\/v?([^/]+)$/\n\nexport abstract class BaseGitHubProvider<T extends UpdateInfo> extends Provider<T> {\n  // so, we don't need to parse port (because node http doesn't support host as url does)\n  protected readonly baseUrl: URL\n  protected readonly baseApiUrl: URL\n\n  protected constructor(protected readonly options: GithubOptions, defaultHost: string, runtimeOptions: ProviderRuntimeOptions) {\n    super({\n      ...runtimeOptions,\n      /* because GitHib uses S3 */\n      isUseMultipleRangeRequest: false,\n    })\n\n    this.baseUrl = newBaseUrl(githubUrl(options, defaultHost))\n    const apiHost = defaultHost === \"github.com\" ? \"api.github.com\" : defaultHost\n    this.baseApiUrl = newBaseUrl(githubUrl(options, apiHost))\n  }\n\n  protected computeGithubBasePath(result: string): string {\n    // https://github.com/electron-userland/electron-builder/issues/1903#issuecomment-320881211\n    const host = this.options.host\n    return host != null && host !== \"github.com\" && host !== \"api.github.com\" ? `/api/v3${result}` : result\n  }\n}\n\nexport class GitHubProvider extends BaseGitHubProvider<UpdateInfo> {\n  constructor(protected readonly options: GithubOptions, private readonly updater: AppUpdater, runtimeOptions: ProviderRuntimeOptions) {\n    super(options, \"github.com\", runtimeOptions)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    const cancellationToken = new CancellationToken()\n\n    const feedXml: string = (await this.httpRequest(newUrlFromBase(`${this.basePath}.atom`, this.baseUrl), {\n      accept: \"application/xml, application/atom+xml, text/xml, */*\",\n    }, cancellationToken))!\n\n    const feed = parseXml(feedXml)\n    let latestRelease = feed.element(\"entry\", false, `No published versions on GitHub`)\n    let version: string | null\n    try {\n      if (this.updater.allowPrerelease) {\n        // noinspection TypeScriptValidateJSTypes\n        version = latestRelease.element(\"link\").attribute(\"href\").match(hrefRegExp)!![1]\n      }\n      else {\n        version = await this.getLatestVersionString(cancellationToken)\n        for (const element of feed.getElements(\"entry\")) {\n          if (element.element(\"link\").attribute(\"href\").match(hrefRegExp)!![1] === version) {\n            latestRelease = element\n            break\n          }\n        }\n      }\n    }\n    catch (e) {\n      throw newError(`Cannot parse releases feed: ${e.stack || e.message},\\nXML:\\n${feedXml}`, \"ERR_UPDATER_INVALID_RELEASE_FEED\")\n    }\n\n    if (version == null) {\n      throw newError(`No published versions on GitHub`, \"ERR_UPDATER_NO_PUBLISHED_VERSIONS\")\n    }\n\n    const channelFile = getChannelFilename(this.getDefaultChannelName())\n    const channelFileUrl = newUrlFromBase(this.getBaseDownloadPath(version, channelFile), this.baseUrl)\n    const requestOptions = this.createRequestOptions(channelFileUrl)\n    let rawData: string\n    try {\n      rawData = (await this.executor.request(requestOptions, cancellationToken))!!\n    }\n    catch (e) {\n      if (!this.updater.allowPrerelease && e instanceof HttpError && e.statusCode === 404) {\n        throw newError(`Cannot find ${channelFile} in the latest release artifacts (${channelFileUrl}): ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n      }\n      throw e\n    }\n\n    const result = parseUpdateInfo(rawData, channelFile, channelFileUrl)\n    if (result.releaseName == null) {\n      result.releaseName = latestRelease.elementValueOrEmpty(\"title\")\n    }\n\n    if (result.releaseNotes == null) {\n      result.releaseNotes = computeReleaseNotes(this.updater.currentVersion, this.updater.fullChangelog, feed, latestRelease)\n    }\n    return result\n  }\n\n  private async getLatestVersionString(cancellationToken: CancellationToken): Promise<string | null> {\n    const options = this.options\n    // do not use API for GitHub to avoid limit, only for custom host or GitHub Enterprise\n    const url = (options.host == null || options.host === \"github.com\") ?\n      newUrlFromBase(`${this.basePath}/latest`, this.baseUrl) :\n      new URL(`${this.computeGithubBasePath(`/repos/${options.owner}/${options.repo}/releases`)}/latest`, this.baseApiUrl)\n    try {\n      const rawData = await this.httpRequest(url, {Accept: \"application/json\"}, cancellationToken)\n      if (rawData == null) {\n        return null\n      }\n\n      const releaseInfo: GithubReleaseInfo = JSON.parse(rawData)\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      throw newError(`Unable to find latest version on GitHub (${url}), please ensure a production release exists: ${e.stack || e.message}`, \"ERR_UPDATER_LATEST_VERSION_NOT_FOUND\")\n    }\n  }\n\n  private get basePath(): string {\n    return `/${this.options.owner}/${this.options.repo}/releases`\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    // still replace space to - due to backward compatibility\n    return resolveFiles(updateInfo, this.baseUrl, p => this.getBaseDownloadPath(updateInfo.version, p.replace(/ /g, \"-\")))\n  }\n\n  private getBaseDownloadPath(version: string, fileName: string): string {\n    return `${this.basePath}/download/${this.options.vPrefixedTagName === false ? \"\" : \"v\"}${version}/${fileName}`\n  }\n}\n\ninterface GithubReleaseInfo {\n  readonly tag_name: string\n}\n\nfunction getNoteValue(parent: XElement): string {\n  const result = parent.elementValueOrEmpty(\"content\")\n  // GitHub reports empty notes as <content>No content.</content>\n  return result === \"No content.\" ? \"\" : result\n}\n\nexport function computeReleaseNotes(currentVersion: semver.SemVer, isFullChangelog: boolean, feed: XElement, latestRelease: any): string | Array<ReleaseNoteInfo> | null {\n  if (!isFullChangelog) {\n    return getNoteValue(latestRelease)\n  }\n\n  const releaseNotes: Array<ReleaseNoteInfo> = []\n  for (const release of feed.getElements(\"entry\")) {\n    // noinspection TypeScriptValidateJSTypes\n    const versionRelease = release.element(\"link\").attribute(\"href\").match(/\\/tag\\/v?([^/]+)$/)![1]\n    if (semver.lt(currentVersion, versionRelease)) {\n      releaseNotes.push({\n        version: versionRelease,\n        note: getNoteValue(release)\n      })\n    }\n  }\n  return releaseNotes\n    .sort((a, b) => semver.rcompare(a.version, b.version))\n}\n"],"sourceRoot":""}
