
import invariant from './invariant';


var caches = [new WeakMap(), new WeakMap(), new WeakMap(), new WeakMap(), new WeakMap()];

export function memoize(object, propertyName, descriptor) {
  var original = descriptor.value;
  var fn = function memoized() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var cached = get(this, args);
    if (cached) {
      return cached;
    }
    var value = original.apply(this, args);
    set(this, args, value);
    return value;
  };

  Object.defineProperty(fn, 'name', { value: propertyName });
  descriptor.value = fn;
  return descriptor;
}

export function get(container, params) {
  var paramsLength = params.length;
  var cache = caches[paramsLength];
  if (!cache) {
    return;
  } else if (paramsLength === 0) {
    return cache.get(container);
  }
  var subject = cache;
  for (var i = 0; i < paramsLength; i++) {
    if (!subject) {
      return;
    }
    var param = params[i];
    subject = subject.get(param);
  }
  return subject;
}

export function has(container, params) {
  var paramsLength = params.length;
  var cache = caches[paramsLength];
  if (!cache) {
    return false;
  } else if (paramsLength === 0) {
    return cache.has(container);
  }
  var subject = cache;
  for (var i = 0; i < paramsLength; i++) {
    if (!subject) {
      return false;
    }
    var param = params[i];
    subject = subject.get(param);
  }
  return subject ? true : false;
}

export function set(container, params, value) {
  var paramsLength = params.length;
  var cache = caches[paramsLength];
  if (!cache) {
    return;
  } else if (paramsLength === 0) {
    cache.set(container, value);
    return;
  }
  var subject = cache;
  for (var i = 0; i < paramsLength; i++) {
    var param = params[i];
    invariant(subject instanceof WeakMap);
    if (i === paramsLength - 1) {
      subject.set(param, value);
    } else if (!subject.has(param)) {
      var child = new WeakMap();
      subject.set(param, child);
      subject = child;
    } else {
      subject = subject.get(param);
    }
  }
}