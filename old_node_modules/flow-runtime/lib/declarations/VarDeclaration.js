import Declaration from './Declaration';

import { addConstraints, collectConstraintErrors, constraintsAccept } from '../typeConstraints';

var VarDeclaration = function (_Declaration) {
  babelHelpers.inherits(VarDeclaration, _Declaration);

  function VarDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, VarDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = VarDeclaration.__proto__ || Object.getPrototypeOf(VarDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'VarDeclaration', _this.constraints = [], _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(VarDeclaration, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(babelHelpers.toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      var type = this.type;

      var hasErrors = false;
      if (type.collectErrors(validation, path, input)) {
        hasErrors = true;
      } else if (collectConstraintErrors(this, validation, path, input)) {
        hasErrors = true;
      }
      return hasErrors;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      return this.type.acceptsType(input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return `declare var ${ this.name }: ${ this.type.toString() };`;
    }
  }]);
  return VarDeclaration;
}(Declaration);

export { VarDeclaration as default };