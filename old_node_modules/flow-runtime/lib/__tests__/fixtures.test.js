import { ok, throws } from 'assert';

import fixtures from './fixtures';

import t from '../globalContext';

describe('fixtures', function () {
  var _loop = function _loop(name, pass, fail) {
    var context = t.createContext();
    if (pass) {
      it(`fixture: ${ name } should pass`, function () {
        ok(pass(context));
      });
    }
    if (fail) {
      it(`fixture: ${ name } should fail`, function () {
        throws(function () {
          return fail(context);
        });
      });
    }
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = fixtures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = babelHelpers.slicedToArray(_ref, 2);

      var name = _ref2[0];
      var _ref2$ = _ref2[1];
      var pass = _ref2$.pass;
      var fail = _ref2$.fail;

      _loop(name, pass, fail);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});