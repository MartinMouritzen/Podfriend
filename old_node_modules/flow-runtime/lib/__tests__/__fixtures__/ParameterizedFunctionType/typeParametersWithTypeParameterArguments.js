

export function pass(t) {
  var T = t.type('T', function (T) {
    var A = T.typeParameter('A');
    return t.object(t.property('a', A), t.property('b', A));
  });

  function f(x) {
    var A = t.typeParameter('A');
    var _returnType = t.return(A);

    var _xType = t.ref(T, t.flowInto(A));
    t.param('x', _xType).assert(x);

    return _returnType.assert(x.a);
  }

  return f({ a: 1, b: 's' }); // <= A is number | string
}

export function fail(t) {
  var T = t.type('T', function (T) {
    var A = T.typeParameter('A');
    return t.object(t.property('a', A), t.property('b', A));
  });

  function f(x) {
    var A = t.typeParameter('A');
    var _returnType = t.return(A);

    var _xType = t.ref(T, t.flowInto(A));
    t.param('x', _xType).assert(x);

    return _returnType.assert(false);
  }

  return f({ a: 1, b: 's' }); // <= A is number | string
}