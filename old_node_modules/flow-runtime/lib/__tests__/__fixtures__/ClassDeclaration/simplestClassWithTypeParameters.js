function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

export function pass(t) {
  var _dec, _dec2, _desc, _value, _class, _descriptor, _descriptor2, _class2, _temp;

  var _PointTypeParametersSymbol = Symbol("PointTypeParameters");

  var Point = (_dec = t.decorate(function () {
    return t.flowInto(this[_PointTypeParametersSymbol].T);
  }), _dec2 = t.decorate(function () {
    return t.flowInto(this[_PointTypeParametersSymbol].T);
  }), (_class = (_temp = _class2 = function () {
    function Point(x, y) {
      babelHelpers.classCallCheck(this, Point);

      _initDefineProp(this, "x", _descriptor, this);

      _initDefineProp(this, "y", _descriptor2, this);

      this[_PointTypeParametersSymbol] = {
        T: t.typeParameter("T")
      };
      var _xType = t.flowInto(this[_PointTypeParametersSymbol].T);
      var _yType = t.flowInto(this[_PointTypeParametersSymbol].T);
      t.param("x", _xType).assert(x);
      t.param("y", _yType).assert(y);
      this.x = x;
      this.y = y;
    }

    babelHelpers.createClass(Point, [{
      key: "go",
      value: function go() {
        var _returnType = t.return(this[_PointTypeParametersSymbol].T);
        return _returnType.assert(this.y);
      }
    }]);
    return Point;
  }(), _class2[t.TypeParametersSymbol] = _PointTypeParametersSymbol, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "x", [_dec], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "y", [_dec2], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  })), _class));


  var p = new Point(123, true);
  return p.go();
}

export function fail(t) {
  var _dec3, _dec4, _desc2, _value2, _class3, _descriptor3, _descriptor4, _class4, _temp2;

  var _PointTypeParametersSymbol = Symbol("PointTypeParameters");

  var Point = (_dec3 = t.decorate(function () {
    return t.flowInto(this[_PointTypeParametersSymbol].T);
  }), _dec4 = t.decorate(function () {
    return t.flowInto(this[_PointTypeParametersSymbol].T);
  }), (_class3 = (_temp2 = _class4 = function () {
    function Point(x, y) {
      babelHelpers.classCallCheck(this, Point);

      _initDefineProp(this, "x", _descriptor3, this);

      _initDefineProp(this, "y", _descriptor4, this);

      this[_PointTypeParametersSymbol] = {
        T: t.typeParameter("T")
      };
      var _xType = t.flowInto(this[_PointTypeParametersSymbol].T);
      var _yType = t.flowInto(this[_PointTypeParametersSymbol].T);
      t.param("x", _xType).assert(x);
      t.param("y", _yType).assert(y);
      this.x = x;
      this.y = y;
    }

    babelHelpers.createClass(Point, [{
      key: "go",
      value: function go() {
        var _returnType = t.return(this[_PointTypeParametersSymbol].T);
        return _returnType.assert('nope this fails');
      }
    }]);
    return Point;
  }(), _class4[t.TypeParametersSymbol] = _PointTypeParametersSymbol, _temp2), (_descriptor3 = _applyDecoratedDescriptor(_class3.prototype, "x", [_dec3], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class3.prototype, "y", [_dec4], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  })), _class3));


  var p = new Point(123, true);
  return p.go();
}