

/**
 * Add constraints to the given subject type.
 */
export function addConstraints(subject) {
  var _subject$constraints;

  for (var _len = arguments.length, constraints = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    constraints[_key - 1] = arguments[_key];
  }

  (_subject$constraints = subject.constraints).push.apply(_subject$constraints, babelHelpers.toConsumableArray(constraints));
}

/**
 * Collect any errors from constraints on the given subject type.
 */


export function collectConstraintErrors(subject, validation, path) {
  var constraints = subject.constraints;
  var length = constraints.length;

  var hasErrors = false;

  for (var _len2 = arguments.length, input = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
    input[_key2 - 3] = arguments[_key2];
  }

  for (var i = 0; i < length; i++) {
    var constraint = constraints[i];
    var violation = constraint.apply(undefined, babelHelpers.toConsumableArray(input));
    if (typeof violation === 'string') {
      validation.addError(path, this, violation);
      hasErrors = true;
    }
  }
  return hasErrors;
}

/**
 * Determine whether the input passes the constraints on the subject type.
 */
export function constraintsAccept(subject) {
  var constraints = subject.constraints;
  var length = constraints.length;

  for (var _len3 = arguments.length, input = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    input[_key3 - 1] = arguments[_key3];
  }

  for (var i = 0; i < length; i++) {
    var constraint = constraints[i];
    if (typeof constraint.apply(undefined, babelHelpers.toConsumableArray(input)) === 'string') {
      return false;
    }
  }
  return true;
}