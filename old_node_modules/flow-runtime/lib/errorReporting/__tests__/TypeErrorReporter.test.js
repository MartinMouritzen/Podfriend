'use strict';

var _assert = require('assert');

var _TypeErrorReporter = require('../TypeErrorReporter');

var _TypeErrorReporter2 = _interopRequireDefault(_TypeErrorReporter);

var _globalContext = require('../../globalContext');

var _globalContext2 = _interopRequireDefault(_globalContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var no = function no(input) {
  return (0, _assert.ok)(!input);
};


describe('TypeErrorReporter', function () {
  it('should accept a valid value', function () {
    var type = _globalContext2.default.string();
    var validation = _globalContext2.default.validate(type, "hello world");
    var reporter = new _TypeErrorReporter2.default(validation);
    no(reporter.report());
  });

  it('should reject an invalid value', function () {
    var type = _globalContext2.default.string();
    var validation = _globalContext2.default.validate(type, false);
    var reporter = new _TypeErrorReporter2.default(validation);
    var err = reporter.report();
    (0, _assert.ok)(err instanceof TypeError);
  });

  describe('Objects', function () {
    var type = _globalContext2.default.object({
      name: _globalContext2.default.string(),
      address: {
        line1: _globalContext2.default.union(_globalContext2.default.string(), _globalContext2.default.number())
      }
    });

    it('should accept a valid value', function () {
      var validation = _globalContext2.default.validate(type, { name: "foo", address: { line1: 'bar' } });
      var reporter = new _TypeErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(type, false);
      var reporter = new _TypeErrorReporter2.default(validation);
      var err = reporter.report();
      (0, _assert.ok)(err instanceof TypeError);
    });

    it('should reject another invalid value', function () {
      var validation = _globalContext2.default.validate(type, { name: false, address: {} });
      var reporter = new _TypeErrorReporter2.default(validation);
      var err = reporter.report();
      (0, _assert.ok)(err instanceof TypeError);
    });
  });
});