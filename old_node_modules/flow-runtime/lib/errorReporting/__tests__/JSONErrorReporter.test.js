'use strict';

var _assert = require('assert');

var _invariant = require('../../invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _JSONErrorReporter = require('../JSONErrorReporter');

var _JSONErrorReporter2 = _interopRequireDefault(_JSONErrorReporter);

var _globalContext = require('../../globalContext');

var _globalContext2 = _interopRequireDefault(_globalContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var no = function no(input) {
  return (0, _assert.ok)(!input);
};

var expect = function expect(report, messages) {
  (0, _invariant2.default)(report && report.errors, "Must have errors.");
  for (var i = 0; i < messages.length; i++) {
    var _report$errors$i = report.errors[i],
        field = _report$errors$i.field,
        message = _report$errors$i.message,
        actual = _report$errors$i.actual;

    var assembled = field + ' ' + message + ', got ' + actual;
    (0, _assert.equal)(normalize(assembled), normalize(messages[i]));
  }
};

function normalize(input) {
  return input.trim().replace(/(\s+)/gm, ' ');
}

describe('JSONErrorReporter', function () {
  it('should accept a valid value', function () {
    var type = _globalContext2.default.string();
    var validation = _globalContext2.default.validate(type, "hello world");
    var reporter = new _JSONErrorReporter2.default(validation);
    no(reporter.report());
  });

  it('should reject an invalid value', function () {
    var type = _globalContext2.default.string();
    var validation = _globalContext2.default.validate(type, false);
    var reporter = new _JSONErrorReporter2.default(validation);
    expect(reporter.report(), ['Value must be a string, got boolean']);
  });

  describe('Objects', function () {
    var type = _globalContext2.default.object({
      name: _globalContext2.default.string(),
      address: {
        line1: _globalContext2.default.string()
      }
    });

    it('should accept a valid value', function () {
      var validation = _globalContext2.default.validate(type, { name: "foo", address: { line1: 'bar' } });
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(type, false);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['Value must be an object, got boolean']);
    });

    it('should reject another invalid value', function () {
      var validation = _globalContext2.default.validate(type, { name: false, address: {} });
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['name must be a string, got boolean', 'address.line1 must be a string, got void']);
    });
  });

  describe('Arrays', function () {
    var type = _globalContext2.default.array(_globalContext2.default.number());

    it('should accept a valid value', function () {
      var validation = _globalContext2.default.validate(type, [1, 2, 3]);
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(type, [1, 2, "foo"]);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['[2] must be a number, got string']);
    });
  });

  describe('Array<Object>', function () {
    var type = _globalContext2.default.array(_globalContext2.default.object({ name: _globalContext2.default.string() }));

    it('should accept a valid value', function () {
      var validation = _globalContext2.default.validate(type, [{ name: 'foo' }]);
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(type, [{ name: 'foo' }, { name: 123 }]);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['[1].name must be a string, got number']);
    });
  });

  describe('Object<Array>', function () {
    var type = _globalContext2.default.array(_globalContext2.default.object({ items: _globalContext2.default.array(_globalContext2.default.number()) }));

    it('should accept a valid value', function () {
      var validation = _globalContext2.default.validate(type, [{ items: [1, 2, 3] }]);
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(type, [{ items: [1, 2, 3] }, { items: [1, 2, "foo"] }]);
      validation.inputName = 'input';
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['input[1].items[2] must be a number, got string']);
    });
  });

  describe('(a: number, b: number) => number', function () {
    var type = _globalContext2.default.fn(_globalContext2.default.param('a', _globalContext2.default.number()), _globalContext2.default.param('b', _globalContext2.default.number()), _globalContext2.default.return(_globalContext2.default.number()));

    var invalidType = _globalContext2.default.fn(_globalContext2.default.param('a', _globalContext2.default.number()), _globalContext2.default.return(_globalContext2.default.number()));

    var valid = _globalContext2.default.decorate(type)(function (a, b) {
      return a + b;
    });
    var invalid = _globalContext2.default.decorate(invalidType)(function (a) {
      return a * 2;
    });

    it('should accept a valid value', function () {
      var validation = _globalContext2.default.validate(type, valid);
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(type, invalid);
      validation.inputName = 'input';
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['input requires 2 argument(s), got (a: number) => number']);
    });
  });

  describe('Thing', function () {
    var Thing = _globalContext2.default.class('Thing', _globalContext2.default.property('name', _globalContext2.default.string()));

    var AnyThing = _globalContext2.default.class('AnyThing', _globalContext2.default.extends(Thing), _globalContext2.default.property('name', _globalContext2.default.union(_globalContext2.default.string(), _globalContext2.default.boolean())), _globalContext2.default.property('url', _globalContext2.default.string()));

    var Person = _globalContext2.default.class('Person', _globalContext2.default.property('age', _globalContext2.default.number()), _globalContext2.default.extends(Thing));

    var validThing = { name: 'hello world' };
    var invalidThing = { name: false };

    var validAnyThing = { name: true, url: 'foo' };
    var invalidAnyThing = { name: false };
    var invalidAnyThing2 = { 'url': 'http://example.com/' };

    var validPerson = { name: 'hello world', age: 123 };
    var invalidPerson = { name: 'Bob', age: false };
    var invalidPerson2 = { age: 21 };

    it('should accept a valid Thing', function () {
      var validation = _globalContext2.default.validate(Thing, validThing);
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid Thing', function () {
      var validation = _globalContext2.default.validate(Thing, invalidThing);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['Thing.name must be a string, got boolean']);
    });

    it('should accept a valid AnyThing', function () {
      var validation = _globalContext2.default.validate(AnyThing, validAnyThing);
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid AnyThing', function () {
      var validation = _globalContext2.default.validate(AnyThing, invalidAnyThing);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['AnyThing.url must be a string, got void']);
    });

    it('should reject another invalid AnyThing', function () {
      var validation = _globalContext2.default.validate(AnyThing, invalidAnyThing2);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['AnyThing.name must be one of: string | boolean, got void']);
    });

    it('should accept a valid Person', function () {
      var validation = _globalContext2.default.validate(Person, validPerson);
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid Person', function () {
      var validation = _globalContext2.default.validate(Person, invalidPerson);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['Person.age must be a number, got boolean']);
    });

    it('should reject another invalid Person', function () {
      var validation = _globalContext2.default.validate(Person, invalidPerson2);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['Person.name must be a string, got void']);
    });
  });

  describe('Class<Thing>', function () {
    var _dec, _class, _dec2, _class2;

    var IThing = _globalContext2.default.class('IThing', {
      name: _globalContext2.default.string()
    });

    var IInvalid = _globalContext2.default.class('IInvalid', {
      num: _globalContext2.default.number()
    });

    var Thing = (_dec = _globalContext2.default.decorate(IThing), _dec(_class = function Thing() {
      _classCallCheck(this, Thing);
    }) || _class);
    var AnotherThing = (_dec2 = _globalContext2.default.decorate(IInvalid), _dec2(_class2 = function AnotherThing() {
      _classCallCheck(this, AnotherThing);
    }) || _class2);


    var ThingClass = _globalContext2.default.ref("Class", _globalContext2.default.ref(Thing));
    var IThingClass = _globalContext2.default.ref("Class", IThing);

    it('should accept a valid value', function () {
      var validation = _globalContext2.default.validate(ThingClass, Thing);
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(ThingClass, AnotherThing);
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['\n        Value must be a Class of Thing, got class IInvalid {\n          num: number;\n        }\n        ']);
    });
  });

  describe('$ObjMap', function () {
    var K = _globalContext2.default.object(_globalContext2.default.property('name', _globalContext2.default.string()), _globalContext2.default.property('email', _globalContext2.default.string()));
    var V = _globalContext2.default.fn(function (fn) {
      var K = fn.typeParameter('K');
      return [_globalContext2.default.param('key', K), _globalContext2.default.return(_globalContext2.default.tuple(K, _globalContext2.default.string()))];
    });
    var PropTuples = _globalContext2.default.ref('$ObjMap', K, V);

    it('accept a valid value', function () {
      var validation = _globalContext2.default.validate(PropTuples, {
        name: ['name', 'Hello'],
        email: ['email', 'World']
      });
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(PropTuples, {
        name: [false, 'Hello'],
        email: ['email', 'World']
      });
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['name[0] must be a string, got boolean']);
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(PropTuples, {
        name: ['name', 'Hello']
      });
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['email must be an Array, got void']);
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(PropTuples, {
        name: ['name', 'Hello'],
        email: ['email', false]
      });
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['email[1] must be a string, got boolean']);
    });
  });

  describe('$ObjMapi', function () {
    var K = _globalContext2.default.object(_globalContext2.default.property('id', _globalContext2.default.number()), _globalContext2.default.property('name', _globalContext2.default.string()));
    var V = _globalContext2.default.fn(function (fn) {
      var K = fn.typeParameter('K');
      var V = fn.typeParameter('V');
      return [_globalContext2.default.param('key', K), _globalContext2.default.param('value', V), _globalContext2.default.return(_globalContext2.default.tuple(K, V))];
    });
    var PropTuples = _globalContext2.default.ref('$ObjMapi', K, V);

    it('accept a valid value', function () {
      var validation = _globalContext2.default.validate(PropTuples, {
        id: ['id', 123],
        name: ['name', 'World']
      });
      var reporter = new _JSONErrorReporter2.default(validation);
      no(reporter.report());
    });

    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(PropTuples, {
        id: ['id', false],
        name: ['name', 'World']
      });
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['id[1] must be a number, got boolean']);
    });
    it('should reject an invalid value', function () {
      var validation = _globalContext2.default.validate(PropTuples, {
        id: ['i d', 123],
        name: ['name', 'World']
      });
      var reporter = new _JSONErrorReporter2.default(validation);
      expect(reporter.report(), ['id[0] must be exactly "id", got string']);
    });
  });
});