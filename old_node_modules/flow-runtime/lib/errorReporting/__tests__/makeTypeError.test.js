import { ok } from 'assert';

import makeTypeError from '../makeTypeError';
import t from '../../globalContext';

var no = function no(input) {
  return ok(!input);
};

describe('makeTypeError', function () {
  it('should accept a valid value', function () {
    var type = t.string();
    var validation = t.validate(type, "hello world");
    var report = makeTypeError(validation);
    no(report);
  });

  it('should reject an invalid value', function () {
    var type = t.string();
    var validation = t.validate(type, false);
    var report = makeTypeError(validation);
    var err = report;
    ok(err instanceof TypeError);
  });

  describe('Objects', function () {
    var type = t.object({
      name: t.string(),
      address: {
        line1: t.union(t.string(), t.number())
      }
    });

    it('should accept a valid value', function () {
      var validation = t.validate(type, { name: "foo", address: { line1: 'bar' } });
      var report = makeTypeError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(type, false);
      var report = makeTypeError(validation);
      var err = report;
      ok(err instanceof TypeError);
    });

    it('should reject another invalid value', function () {
      var validation = t.validate(type, { name: false, address: {} });
      var report = makeTypeError(validation);
      var err = report;
      ok(err instanceof TypeError);
    });
  });
});