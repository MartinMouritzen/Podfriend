import { ok, equal } from 'assert';
import invariant from '../../invariant';
import makeJSONError from '../makeJSONError';
import t from '../../globalContext';

var no = function no(input) {
  return ok(!input);
};

var expect = function expect(errors, messages) {
  invariant(errors && errors.length > 0, "Must have errors.");
  for (var i = 0; i < messages.length; i++) {
    var _errors$i = errors[i],
        field = _errors$i.field,
        message = _errors$i.message,
        actual = _errors$i.actual;

    var assembled = `${ field } ${ message }, got ${ actual }`;
    equal(normalize(assembled), normalize(messages[i]));
  }
};

function normalize(input) {
  return input.trim().replace(/(\s+)/gm, ' ');
}

describe('makeJSONError', function () {
  it('should accept a valid value', function () {
    var type = t.string();
    var validation = t.validate(type, "hello world");
    var report = makeJSONError(validation);
    no(report);
  });

  it('should reject an invalid value', function () {
    var type = t.string();
    var validation = t.validate(type, false);
    var report = makeJSONError(validation);
    expect(report, ['Value must be a string, got boolean']);
  });

  describe('Objects', function () {
    var type = t.object({
      name: t.string(),
      address: {
        line1: t.string()
      }
    });

    it('should accept a valid value', function () {
      var validation = t.validate(type, { name: "foo", address: { line1: 'bar' } });
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(type, false);
      var report = makeJSONError(validation);
      expect(report, ['Value must be an object, got boolean']);
    });

    it('should reject another invalid value', function () {
      var validation = t.validate(type, { name: false, address: {} });
      var report = makeJSONError(validation);
      expect(report, ['name must be a string, got boolean', 'address.line1 must be a string, got void']);
    });
  });

  describe('Arrays', function () {
    var type = t.array(t.number());

    it('should accept a valid value', function () {
      var validation = t.validate(type, [1, 2, 3]);
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(type, [1, 2, "foo"]);
      var report = makeJSONError(validation);
      expect(report, ['[2] must be a number, got string']);
    });
  });

  describe('Array<Object>', function () {
    var type = t.array(t.object({ name: t.string() }));

    it('should accept a valid value', function () {
      var validation = t.validate(type, [{ name: 'foo' }]);
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(type, [{ name: 'foo' }, { name: 123 }]);
      var report = makeJSONError(validation);
      expect(report, ['[1].name must be a string, got number']);
    });
  });

  describe('Object<Array>', function () {
    var type = t.array(t.object({ items: t.array(t.number()) }));

    it('should accept a valid value', function () {
      var validation = t.validate(type, [{ items: [1, 2, 3] }]);
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(type, [{ items: [1, 2, 3] }, { items: [1, 2, "foo"] }]);
      validation.path = ['input'];
      var report = makeJSONError(validation);
      expect(report, ['input[1].items[2] must be a number, got string']);
    });
  });

  describe('(a: number, b: number) => number', function () {
    var type = t.fn(t.param('a', t.number()), t.param('b', t.number()), t.return(t.number()));

    var invalidType = t.fn(t.param('a', t.number()), t.return(t.number()));

    var valid = t.decorate(type)(function (a, b) {
      return a + b;
    });
    var invalid = t.decorate(invalidType)(function (a) {
      return a * 2;
    });

    it('should accept a valid value', function () {
      var validation = t.validate(type, valid);
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(type, invalid);
      validation.path = ['input'];
      var report = makeJSONError(validation);
      expect(report, ['input argument "b" must be: number, got (a: number) => number']);
    });
  });

  describe('Thing', function () {
    var Thing = t.class('Thing', t.property('name', t.string()));

    var AnyThing = t.class('AnyThing', t.extends(Thing), t.property('name', t.union(t.string(), t.boolean())), t.property('url', t.string()));

    var Person = t.class('Person', t.property('age', t.number()), t.extends(Thing));

    var validThing = { name: 'hello world' };
    var invalidThing = { name: false };

    var validAnyThing = { name: true, url: 'foo' };
    var invalidAnyThing = { name: false };
    var invalidAnyThing2 = { 'url': 'http://example.com/' };

    var validPerson = { name: 'hello world', age: 123 };
    var invalidPerson = { name: 'Bob', age: false };
    var invalidPerson2 = { age: 21 };

    it('should accept a valid Thing', function () {
      var validation = t.validate(Thing, validThing);
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid Thing', function () {
      var validation = t.validate(Thing, invalidThing);
      var report = makeJSONError(validation);
      expect(report, ['Thing.name must be a string, got boolean']);
    });

    it('should accept a valid AnyThing', function () {
      var validation = t.validate(AnyThing, validAnyThing);
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid AnyThing', function () {
      var validation = t.validate(AnyThing, invalidAnyThing);
      var report = makeJSONError(validation);
      expect(report, ['AnyThing.url must be a string, got void']);
    });

    it('should reject another invalid AnyThing', function () {
      var validation = t.validate(AnyThing, invalidAnyThing2);
      var report = makeJSONError(validation);
      expect(report, ['AnyThing.name must be one of: string | boolean, got void']);
    });

    it('should accept a valid Person', function () {
      var validation = t.validate(Person, validPerson);
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid Person', function () {
      var validation = t.validate(Person, invalidPerson);
      var report = makeJSONError(validation);
      expect(report, ['Person.age must be a number, got boolean']);
    });

    it('should reject another invalid Person', function () {
      var validation = t.validate(Person, invalidPerson2);
      var report = makeJSONError(validation);
      expect(report, ['Person.name must be a string, got void']);
    });
  });

  describe('Class<Thing>', function () {
    var _dec, _class, _dec2, _class2;

    var IThing = t.class('IThing', {
      name: t.string()
    });

    var IInvalid = t.class('IInvalid', {
      num: t.number()
    });

    var Thing = (_dec = t.decorate(IThing), _dec(_class = function Thing() {
      babelHelpers.classCallCheck(this, Thing);
    }) || _class);
    var AnotherThing = (_dec2 = t.decorate(IInvalid), _dec2(_class2 = function AnotherThing() {
      babelHelpers.classCallCheck(this, AnotherThing);
    }) || _class2);


    var ThingClass = t.ref("Class", t.ref(Thing));

    it('should accept a valid value', function () {
      var validation = t.validate(ThingClass, Thing);
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(ThingClass, AnotherThing);
      var report = makeJSONError(validation);
      expect(report, [`
        Value must be a Class of Thing, got class IInvalid {
          num: number;
        }
        `]);
    });
  });

  describe('$ObjMap', function () {
    var K = t.object(t.property('name', t.string()), t.property('email', t.string()));
    var V = t.fn(function (fn) {
      var K = fn.typeParameter('K');
      return [t.param('key', K), t.return(t.tuple(K, t.string()))];
    });
    var PropTuples = t.ref('$ObjMap', K, V);

    it('accept a valid value', function () {
      var validation = t.validate(PropTuples, {
        name: ['name', 'Hello'],
        email: ['email', 'World']
      });
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(PropTuples, {
        name: [false, 'Hello'],
        email: ['email', 'World']
      });
      var report = makeJSONError(validation);
      expect(report, ['name[0] must be a string, got boolean']);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(PropTuples, {
        name: ['name', 'Hello']
      });
      var report = makeJSONError(validation);
      expect(report, ['email must be an Array, got void']);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(PropTuples, {
        name: ['name', 'Hello'],
        email: ['email', false]
      });
      var report = makeJSONError(validation);
      expect(report, ['email[1] must be a string, got boolean']);
    });
  });

  describe('$ObjMapi', function () {
    var K = t.object(t.property('id', t.number()), t.property('name', t.string()));
    var V = t.fn(function (fn) {
      var K = fn.typeParameter('K');
      var V = fn.typeParameter('V');
      return [t.param('key', K), t.param('value', V), t.return(t.tuple(K, V))];
    });
    var PropTuples = t.ref('$ObjMapi', K, V);

    it('accept a valid value', function () {
      var validation = t.validate(PropTuples, {
        id: ['id', 123],
        name: ['name', 'World']
      });
      var report = makeJSONError(validation);
      no(report);
    });

    it('should reject an invalid value', function () {
      var validation = t.validate(PropTuples, {
        id: ['id', false],
        name: ['name', 'World']
      });
      var report = makeJSONError(validation);
      expect(report, ['id[1] must be a number, got boolean']);
    });
    it('should reject an invalid value', function () {
      var validation = t.validate(PropTuples, {
        id: ['i d', 123],
        name: ['name', 'World']
      });
      var report = makeJSONError(validation);
      expect(report, ['id[0] must be exactly "id", got string']);
    });
  });
});