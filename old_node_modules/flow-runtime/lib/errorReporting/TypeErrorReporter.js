'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _makeErrorMessage = require('../makeErrorMessage');

var _makeErrorMessage2 = _interopRequireDefault(_makeErrorMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TypeErrorReporter = function () {
  function TypeErrorReporter(validation) {
    _classCallCheck(this, TypeErrorReporter);

    this.validation = validation;
  }

  _createClass(TypeErrorReporter, [{
    key: 'report',
    value: function report() {
      var validation = this.validation;

      if (!validation.hasErrors()) {
        return;
      }
      var context = validation.context,
          errors = validation.errors;

      if (errors.length === 1) {
        var _errors$ = _slicedToArray(errors[0], 2),
            path = _errors$[0],
            message = _errors$[1];

        var actual = context.typeOf(validation.resolvePath(path));
        return new TypeError((0, _makeErrorMessage2.default)(path, message, actual));
      }
      var collected = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              _path = _step$value[0],
              _message = _step$value[1];

          var _actual = context.typeOf(validation.resolvePath(_path));
          collected.push((0, _makeErrorMessage2.default)(_path, _message, _actual));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return new TypeError(collected.join('\n\n'));
    }
  }]);

  return TypeErrorReporter;
}();

exports.default = TypeErrorReporter;