'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeComparison;
exports.resolveType = resolveType;
exports.makeSimpleComparison = makeSimpleComparison;
exports.makeObjectComparison = makeObjectComparison;

var _types = require('./types');

function makeComparison(expected, inferred) {
  var resolved = expected.unwrap();
  if (resolved instanceof _types.ObjectType && inferred instanceof _types.ObjectType) {
    return makeObjectComparison(resolved, inferred);
  } else {
    return makeSimpleComparison(resolved, inferred);
  }
}

function resolveType(input) {
  if (input instanceof _types.FunctionTypeParam || input instanceof _types.FunctionTypeRestParam) {
    return resolveType(input.type);
  } else if (input instanceof _types.FunctionTypeReturn) {
    return input.type;
  } else if (input instanceof _types.TypeReference) {
    return resolveType(input.type);
  } else if (input instanceof _types.PartialType) {
    return resolveType(input.type);
  } else if (input instanceof _types.TypeParameter) {
    return resolveType(input.recorded || input.bound || input);
  } else if (input instanceof _types.TypeAlias) {
    return resolveType(input.type);
  } else if (input instanceof _types.ObjectTypeCallProperty) {
    return resolveType(input.value);
  } else if (input instanceof _types.ObjectTypeIndexer) {
    return resolveType(input.value);
  } else if (input instanceof _types.ObjectTypeProperty) {
    return resolveType(input.value);
  } else if (input instanceof _types.NullableType) {
    return resolveType(input.type);
  } else {
    return input;
  }
}

function makeSimpleComparison(expected, inferred) {
  return 'Expected: ' + expected.toString() + '\n\nActual: ' + inferred.toString() + '\n\n';
}

function makeObjectComparison(expected, inferred) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = expected.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var expectedProperty = _step.value;

      var inferredProperty = inferred.getProperty(expectedProperty.key);
      if (!inferredProperty) {}
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return makeSimpleComparison(expected, inferred);
}