import invariant from './invariant';

export default function decorateGeneratorFunction(type, fn) {

  // const generatorType = type.returnType;

  var decorated = function* decorated() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    type.assertParams.apply(type, babelHelpers.toConsumableArray(args));
    var gen = fn.apply(this, args);
    var next = void 0;
    while (!(next = gen.next()).done) {
      // eslint-disable-line
      var value = next.value;
      value;
      yield value;
    }
    invariant(gen.done, 'Generator has exhausted.');
    var result = next.value;
    result;
    //generatorType.assertReturn(result);

    // Ignore
    return result;
  };

  Object.defineProperties(decorated, {
    name: {
      value: fn.name || 'anonymous'
    },
    length: {
      value: fn.length
    }
  });

  return decorated;
}