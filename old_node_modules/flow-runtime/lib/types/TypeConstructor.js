import Type from './Type';


import TypeParameterApplication from './TypeParameterApplication';

var TypeConstructor = function (_Type) {
  babelHelpers.inherits(TypeConstructor, _Type);

  function TypeConstructor() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, TypeConstructor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TypeConstructor.__proto__ || Object.getPrototypeOf(TypeConstructor)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeConstructor', _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(TypeConstructor, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      throw new Error(`Not implemented: collectErrors().`);
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      throw new Error(`Not implemented: accepts().`);
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      throw new Error(`Not implemented: acceptsType().`);
    }
  }, {
    key: 'inferTypeParameters',
    value: function inferTypeParameters(input) {
      throw new Error(`No inferrer for ${ this.name }.`);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.name;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name
      };
    }
  }]);
  return TypeConstructor;
}(Type);

export { TypeConstructor as default };