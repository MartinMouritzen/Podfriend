import Type from './Type';
import getErrorMessage from "../getErrorMessage";

var UnionType = function (_Type) {
  babelHelpers.inherits(UnionType, _Type);

  function UnionType() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, UnionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = UnionType.__proto__ || Object.getPrototypeOf(UnionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'UnionType', _this.types = [], _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(UnionType, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (type.accepts(input)) {
          return false;
        }
      }
      validation.addError(path, this, getErrorMessage('ERR_NO_UNION', this.toString()));
      return true;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (type.accepts(input)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      var types = this.types;
      if (input instanceof UnionType) {
        var inputTypes = input.types;
        loop: for (var i = 0; i < types.length; i++) {
          var type = types[i];
          for (var j = 0; j < inputTypes.length; j++) {
            if (type.acceptsType(inputTypes[i])) {
              continue loop;
            }
          }
          // if we got this far then nothing accepted this type.
          return false;
        }
        return true;
      } else {
        for (var _i = 0; _i < types.length; _i++) {
          var _type = types[_i];
          if (_type.acceptsType(input)) {
            return true;
          }
        }
        return false;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.types.join(' | ');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return UnionType;
}(Type);

export { UnionType as default };