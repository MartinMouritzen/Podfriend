'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _Type = require('./Type');

var _Type2 = _interopRequireDefault(_Type);

var _TypeParameterApplication = require('./TypeParameterApplication');

var _TypeParameterApplication2 = _interopRequireDefault(_TypeParameterApplication);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let TypeHandler = class TypeHandler extends _Type2.default {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.typeName = 'TypeHandler', _temp;
  }

  accepts(input, ...typeInstances) {
    throw new Error(`No acceptser for ${ this.name }.`);
  }

  acceptsType(input) {
    throw new Error(`No acceptser for ${ this.name }.`);
  }

  inferTypeParameters(input) {
    throw new Error(`No inferrer for ${ this.name }.`);
  }

  apply(...typeInstances) {
    const target = new _TypeParameterApplication2.default(this.context);
    target.parent = this;
    target.typeInstances = typeInstances;
    return target;
  }

  makeErrorMessage() {
    return `Invalid value for type handler: ${ this.name }.`;
  }

  /**
   * Get the inner type or value.
   */
  resolve() {
    const { impl } = this;
    if (impl) {
      return impl;
    } else {
      return this;
    }
  }

  toString() {
    return this.name;
  }

  toJSON() {
    return {
      typeName: this.typeName,
      name: this.name
    };
  }

};
exports.default = TypeHandler;