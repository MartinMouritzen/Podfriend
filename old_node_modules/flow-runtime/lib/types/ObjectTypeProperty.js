import Type from './Type';

import { addConstraints, collectConstraintErrors, constraintsAccept } from '../typeConstraints';

var ObjectTypeProperty = function (_Type) {
  babelHelpers.inherits(ObjectTypeProperty, _Type);

  function ObjectTypeProperty() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, ObjectTypeProperty);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ObjectTypeProperty.__proto__ || Object.getPrototypeOf(ObjectTypeProperty)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeProperty', _this.constraints = [], _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }
  // Ignore


  babelHelpers.createClass(ObjectTypeProperty, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(babelHelpers.toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      var optional = this.optional,
          key = this.key,
          value = this.value;

      if (optional && input[key] === undefined) {
        return false;
      }
      var hasErrors = false;
      if (value.collectErrors(validation, path.concat(key), input[key])) {
        hasErrors = true;
      } else if (collectConstraintErrors(this, validation, path.concat(key), input[key])) {
        hasErrors = true;
      }
      return hasErrors;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (this.optional && input[this.key] === undefined) {
        return true;
      } else if (!this.value.accepts(input[this.key])) {
        return false;
      } else {
        return constraintsAccept(this, input[this.key]);
      }
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      if (!(input instanceof ObjectTypeProperty)) {
        return false;
      }
      return this.value.acceptsType(input.value);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      if (this.static) {
        return `static ${ this.key }${ this.optional ? '?' : '' }: ${ this.value.toString() };`;
      } else {
        return `${ this.key }${ this.optional ? '?' : '' }: ${ this.value.toString() };`;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        key: this.key,
        value: this.value,
        optional: this.optional
      };
    }
  }]);
  return ObjectTypeProperty;
}(Type);

export { ObjectTypeProperty as default };