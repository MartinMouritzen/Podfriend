import Type from './Type';
import StringLiteralType from './StringLiteralType';
import getErrorMessage from "../getErrorMessage";

var StringType = function (_Type) {
  babelHelpers.inherits(StringType, _Type);

  function StringType() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, StringType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StringType.__proto__ || Object.getPrototypeOf(StringType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'StringType', _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(StringType, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      if (typeof input === 'string') {
        return false;
      } else {
        validation.addError(path, this, getErrorMessage('ERR_EXPECT_STRING'));
        return true;
      }
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'string';
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      return input instanceof StringType || input instanceof StringLiteralType;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'string';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return StringType;
}(Type);

export { StringType as default };