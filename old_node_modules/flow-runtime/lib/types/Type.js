import makeError from '../makeError';

/**
 * # Type
 *
 * This is the base class for all types.
 */
var Type = function () {
  function Type(context) {
    babelHelpers.classCallCheck(this, Type);
    this.typeName = 'Type';

    this.context = context;
  }

  babelHelpers.createClass(Type, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      return false;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      throw new Error('Not implemented.');
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      throw new Error('Not implemented.');
    }
  }, {
    key: 'assert',
    value: function assert(input) {
      var error = makeError(this, input);
      if (error) {
        if (typeof Error.captureStackTrace === 'function') {
          Error.captureStackTrace(error, this.assert);
        }
        throw error;
      }
      return input;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      throw new Error('Not implemented.');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return Type;
}();

export { Type as default };