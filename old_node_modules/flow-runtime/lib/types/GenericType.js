import TypeConstructor from './TypeConstructor';

import getErrorMessage from "../getErrorMessage";

var GenericType = function (_TypeConstructor) {
  babelHelpers.inherits(GenericType, _TypeConstructor);

  function GenericType() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, GenericType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = GenericType.__proto__ || Object.getPrototypeOf(GenericType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'GenericType', _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(GenericType, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      var name = this.name,
          impl = this.impl;

      if (input instanceof impl) {
        return false;
      }
      validation.addError(path, this, getErrorMessage('ERR_EXPECT_INSTANCEOF', name));
      return true;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input instanceof this.impl;
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      return input instanceof GenericType && input.impl === this.impl;
    }
  }, {
    key: 'inferTypeParameters',
    value: function inferTypeParameters(input) {
      return [];
    }
  }]);
  return GenericType;
}(TypeConstructor);

export { GenericType as default };