import Type from './Type';
import getErrorMessage from "../getErrorMessage";

var TupleType = function (_Type) {
  babelHelpers.inherits(TupleType, _Type);

  function TupleType() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, TupleType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TupleType.__proto__ || Object.getPrototypeOf(TupleType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TupleType', _this.types = [], _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(TupleType, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      var types = this.types;
      var length = types.length;
      var context = this.context;

      if (!context.checkPredicate('Array', input)) {
        validation.addError(path, this, getErrorMessage('ERR_EXPECT_ARRAY'));
        return true;
      }
      var hasErrors = false;
      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (type.collectErrors(validation, path.concat(i), input[i])) {
          hasErrors = true;
        }
      }
      return hasErrors;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;
      var context = this.context;


      if (!context.checkPredicate('Array', input) || input.length < length) {
        return false;
      }
      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (!type.accepts(input[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      if (!(input instanceof TupleType)) {
        return false;
      }
      var types = this.types;
      var inputTypes = input.types;
      if (inputTypes.length < types.length) {
        return false;
      }
      for (var i = 0; i < types.length; i++) {
        if (!types[i].acceptsType(inputTypes[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return `[${ this.types.join(', ') }]`;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return TupleType;
}(Type);

export { TupleType as default };