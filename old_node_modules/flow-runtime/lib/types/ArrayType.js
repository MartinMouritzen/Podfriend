import Type from './Type';
import getErrorMessage from "../getErrorMessage";


import { inValidationCycle, startValidationCycle, endValidationCycle, inToStringCycle, startToStringCycle, endToStringCycle } from '../cyclic';

var ArrayType = function (_Type) {
  babelHelpers.inherits(ArrayType, _Type);

  function ArrayType() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, ArrayType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ArrayType.__proto__ || Object.getPrototypeOf(ArrayType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ArrayType', _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(ArrayType, [{
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      var context = this.context;

      if (!context.checkPredicate('Array', input)) {
        validation.addError(path, this, getErrorMessage('ERR_EXPECT_ARRAY'));
        return true;
      }
      if (inValidationCycle(this, input)) {
        return false;
      }
      startValidationCycle(this, input);
      var elementType = this.elementType;
      var length = input.length;


      var hasErrors = false;
      for (var i = 0; i < length; i++) {
        if (elementType.collectErrors(validation, path.concat(i), input[i])) {
          hasErrors = true;
        }
      }
      endValidationCycle(this, input);
      return hasErrors;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var context = this.context;

      if (!context.checkPredicate('Array', input)) {
        return false;
      }
      if (inValidationCycle(this, input)) {
        return true;
      }
      startValidationCycle(this, input);
      var elementType = this.elementType;
      var length = input.length;

      for (var i = 0; i < length; i++) {
        if (!elementType.accepts(input[i])) {
          endValidationCycle(this, input);
          return false;
        }
      }
      endValidationCycle(this, input);
      return true;
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      return input instanceof ArrayType && this.elementType.acceptsType(input.elementType);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var elementType = this.elementType;

      if (inToStringCycle(this)) {
        if (typeof elementType.name === 'string') {
          return `Array<$Cycle<${ elementType.name }>>`;
        } else {
          return `Array<$Cycle<Object>>`;
        }
      }
      startToStringCycle(this);
      var output = `Array<${ elementType.toString() }>`;
      endToStringCycle(this);
      return output;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        elementType: this.elementType
      };
    }
  }]);
  return ArrayType;
}(Type);

export { ArrayType as default };