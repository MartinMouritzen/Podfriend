
import Type from './Type';


import TypeParameter from './TypeParameter';
import TypeParameterApplication from './TypeParameterApplication';

import { collectConstraintErrors, constraintsAccept } from '../typeConstraints';

var PartialType = function (_Type) {
  babelHelpers.inherits(PartialType, _Type);

  function PartialType() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, PartialType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = PartialType.__proto__ || Object.getPrototypeOf(PartialType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'PartialType', _this.typeParameters = [], _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(PartialType, [{
    key: 'typeParameter',
    value: function typeParameter(id, bound) {
      var target = new TypeParameter(this.context);
      target.id = id;
      target.bound = bound;
      this.typeParameters.push(target);
      return target;
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'collectErrors',
    value: function collectErrors(validation, path, input) {
      var constraints = this.constraints,
          type = this.type;

      var hasErrors = false;
      if (type.collectErrors(validation, path, input)) {
        hasErrors = true;
      } else if (constraints && collectConstraintErrors(this, validation, path, input)) {
        hasErrors = true;
      }
      return hasErrors;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var constraints = this.constraints,
          type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (constraints && !constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      return this.type.acceptsType(input);
    }
  }, {
    key: 'toString',
    value: function toString(expand) {
      var type = this.type;

      return type.toString(expand);
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        typeParameters: this.typeParameters,
        type: this.type
      };
    }
  }]);
  return PartialType;
}(Type);

export { PartialType as default };